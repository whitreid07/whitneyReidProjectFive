{"version":3,"sources":["Components/Form.js","Components/Recipes.js","Components/GetIngredients.js","Components/App.js","serviceWorker.js","index.js"],"names":["Form","props","keyDown","onSubmit","getRecipes","className","type","name","placeholder","activeClass","to","spy","smooth","offset","duration","aria-hidden","title","Recipes","onRecipeClick","rId","a","axios","get","response","setCurrentIngredients","data","recipe","getModal","id","myRecipes","map","index","key","tabIndex","src","image_url","alt","publisher","onClick","recipe_id","GetIngredients","ingredientsObject","ingredients","ingredient","target","rel","href","source_url","closeModal","apiKey","apiUrl","App","setState","currentIngredients","e","preventDefault","recipeName","elements","value","method","url","dataResponse","params","q","format","then","res","recipes","length","swal","icon","sixRecipes","slice","hasRecipes","catch","err","state","isModalShown","close","role","aria-label","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a51090e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\n\n//Once submitted, recipes will be displayed\n//Link to do smooth scroll from submit button to recipe container\nconst Form = (props, keyDown) => {\n  return (\n    <form onSubmit={props.getRecipes}>\n      <div className=\"formContainer\">\n        <input className=\"formInput\" type=\"text\" name=\"recipeName\" placeholder=\"enter word ie. chicken\" />\n\n        <Link\n          activeClass=\"active\"\n          to=\"container\"\n          spy={true}\n          smooth={true}\n          offset={0}\n          duration={600}\n          className=\"formButton\"\n        >\n          Find Recipe  <i aria-hidden=\"true\" title=\"Down arrow icon let's user know to go down or more to see\" className=\"fas fa-arrow-circle-down\"></i>\n        </Link>\n\n\n      </div>\n    </form >\n  )\n};\n\n\nexport default Form;","import React from 'react';\nimport axios from 'axios'\n\nconst apiKey = '6fd58c2421e8e2469be5ea3e8d4c9e6d';\n\n\nconst Recipes = (props) => {\n  //Within a recipe component display ( ie. name, publisher,recipe_id)\n  // Go onclick on your recipe cards.\n  // Make an API call to the recipe ingredient END point. USING the recipe_id to fetch\n  const onRecipeClick = async (rId) => {\n    const response = await axios.get(`https://www.food2fork.com/api/get?key=${apiKey}&rId=${rId}`);\n\n    //ingredients.\n    // Want to set those ingredients as state.\n    props.setCurrentIngredients(response.data.recipe)\n    //Modal to appear once clicked\n    props.getModal(true)\n    // Create a  recipe ingredients component to render out the ingredients.\n\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"innerWrapper\">\n        <div id=\"formButton\" className=\"container\">\n\n          {props.myRecipes.map((recipe, index) => {\n\n            return (\n              < div id=\"container\" key={index} tabIndex=\"0\" className=\"recipeContainer\" >\n                <button className=\"backTop\">Back to top</button>\n                <div className=\"recipeImageTitle\">\n                  <img className=\"recipeImage\" src={recipe.image_url} alt={recipe.title} />\n                  <h2 className=\"recipeTitle\">{recipe.title}</h2>\n                </div>\n                <div className=\"recipeContent\">\n                  <p className=\"recipePublisher\"><span className=\"publisher\">Publisher:</span>{recipe.publisher}</p>\n\n                  <button onClick={() => onRecipeClick(recipe.recipe_id)} className=\"ingredientsButton\">View Ingredients</button>\n                </div>\n\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n\n};\n\nexport default Recipes;","import React from 'react';\n\nconst GetIngredients = (props, index) => {\n\n  return (\n    <div key={index} className=\"modal\">\n      <div className=\"modalImageContainer\">\n        <div className=\"modalImageSize\">\n          <img className=\"modalImage\" src={props.ingredientsObject.image_url} alt={props.ingredientsObject.title} />\n        </div>\n      </div>\n      <div className=\"modalContents\">\n        <h1 className=\"modalTitle\">{props.ingredientsObject.title}</h1>\n        <div className=\"modalIngredients\">\n          {props.ingredientsObject.ingredients ? props.ingredientsObject.ingredients.map((ingredient, index) => {\n            return (\n              <div>\n\n                <li key={index}>{ingredient}</li>\n              </div>\n            )\n\n          }) : null}\n        </div>\n        <button className=\"recipeButton\">\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={props.ingredientsObject.source_url}><i aria-hidden=\"true\" title=\"External link icon let's user know external link will exit app\" className=\"fas fa-external-link-alt\"></i>  Get Recipe! </a>\n        </button>\n\n        <button onClick={() => props.closeModal(false)} className=\"closeButton\"><i aria-hidden=\"true\" title=\"Close icon let's user know to close button\" className=\"fas fa-window-close\"></i>  Close </button>\n      </div>\n    </div>\n  )\n\n\n};\n\nexport default GetIngredients;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport '../Partials/App.scss';\nimport Form from './Form';\nimport Recipes from './Recipes';\nimport GetIngredients from './GetIngredients';\n\n// Declare API Key and URL\nconst apiKey = '6fd58c2421e8e2469be5ea3e8d4c9e6d';\nconst apiUrl = 'https://www.food2fork.com/api/search';\n\n//Set recipes, currentIngredients, has recipes and isModalShown data as initial state to an empty array\n//Recipe url will be the food2folk API\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipes: [],\n      currentIngredients: [],\n      hasRecipes: true,\n      isModalShown: false,\n    }\n  }\n  //Use arrow function to get ingredients parameter\n  setCurrentIngredients = (ingredients) => {\n    this.setState({ currentIngredients: ingredients })\n  }\n  //Stop form from refreshing on submit\n  //Declare variable for recipeName\n  getRecipes = e => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value;\n\n    //Make ‘GET’ request using axios with the users input \n    axios({\n      method: 'GET',\n      url: apiUrl,\n      dataResponse: 'json',\n      params: {\n        key: apiKey,\n        q: recipeName,\n        format: 'json',\n      }\n    })\n      //Use .then() to get recipe results\n      .then(res => {\n        // Error handling for when the user doesn't input a word that returns recipes\n        if (res.data.recipes.length === 0) {\n          swal({\n            title: `Sorry..., That word cannot be found, please try another!`,\n            icon: \"error\"\n          })\n        }\n        else {\n          //Only return six recipes out of 30 from the API call\n          const sixRecipes = res.data.recipes.slice(0, 6);\n          this.setState({\n            recipes: sixRecipes,\n            hasRecipes: false,\n          })\n        }\n      }).catch(err => (err))\n  }\n  //Function to open modal view\n  getModal = (state) => {\n    this.setState({ isModalShown: state })\n  }\n  //Function to close modal view\n  closeModal = (close) => {\n    this.setState({ isModalShown: close })\n  }\n  //Render foodieLogo, h1, an input field and get recipe button; once recipe is called, user has option to view recipes using modal concept\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"headerContainer\">\n          <div className=\"overlay\">\n            <div className=\"headerContents\">\n              <div className=\"foodieLogo\">foodie</div>\n              <h1 className=\"headerTitle\">what's cooking tonight? <span role=\"img\" aria-label=\"folk, plate and knife\">🍽</span></h1>\n              <p className=\"typeWord\">Type a word to get a recipe below!</p>\n\n              <Form getRecipes={(e) => this.getRecipes(e)} keyDown={(e) => this.getRecipes(e)} />\n\n            </div>\n          </div>\n        </header>\n        <div className=\"modalContainer\">\n          <Recipes id=\"recipe\" myRecipes={this.state.recipes} setCurrentIngredients={this.setCurrentIngredients} getModal={this.getModal} />\n\n          {this.state.isModalShown ? <GetIngredients ingredientsObject={this.state.currentIngredients} closeModal={this.closeModal} /> : null}\n        </div>\n\n        <footer className=\"recipeFooter\">\n          <p className=\"footerCopy\"> Created by Whitney Reid &copy; 2019</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}