{"version":3,"sources":["Components/Form.js","Components/Recipes.js","Components/GetIngredients.js","Components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipes","className","type","name","placeholder","activeClass","to","spy","smooth","offset","duration","Recipes","console","log","onRecipeClick","rId","a","axios","get","response","data","setCurrentIngredients","recipe","getModal","id","myRecipes","map","index","recipe_id","key","tabIndex","src","image_url","alt","title","publisher","onClick","GetIngredients","ingredients","ingredientsObject","ingredient","target","href","source_url","class","closeModal","apiKey","apiUrl","App","setState","currentIngredients","e","preventDefault","recipeName","elements","value","method","url","dataResponse","params","q","format","then","res","recipes","length","swal","icon","threeRecipes","slice","hasRecipes","isLoading","catch","err","state","isModalShown","close","role","aria-label","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad03a174.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\n\nconst Form = (props) => {\n  return (\n    <form onSubmit={props.getRecipes}>\n      <div className=\"formContainer\">\n        <input className=\"formInput\" type=\"text\" name=\"recipeName\" placeholder=\"enter word ie. pizza\" />\n        <button>\n          <Link\n            activeClass=\"active\"\n            to=\"recipeContainer\"\n            spy={true}\n            smooth={true}\n            offset={0}\n            duration={500}\n            className=\"formButton\"\n          >Find Recipe!</Link>\n        </button>\n      </div>\n    </form >\n  )\n};\n\n\n\nexport default Form;","import React from 'react';\nimport axios from 'axios'\n\nconst apiKey = '452f1d12915191d1fc2777ca19f2d244';\n\n\nconst Recipes = (props) => {\n  console.log(props)\n  // Go onclick on your recipe cards.\n  // Make an API call to the recipe ingredient END point. USING the recipe_id to fetch\n  const onRecipeClick = async (rId) => {\n    const response = await axios.get(`https://www.food2fork.com/api/get?key=${apiKey}&rId=${rId}`);\n    console.log(\"on recipe click\", response.data);\n    //ingredients.\n    // Want to set those ingredients as state.\n    props.setCurrentIngredients(response.data.recipe)\n    //Modal to appear once clicked\n    props.getModal(true)\n    // Create a  recipe ingredients component to render out the ingredients.\n\n  }\n\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"innerWrapper\">\n        <div id=\"formButton\" className=\"container\">\n          <button className=\"backTop\">Back to top</button>\n\n          {props.myRecipes.map((recipe, index) => {\n            console.log(recipe.recipe_id)\n            // You have recipe ID here.\n            return (\n              < div id=\"recipeContainer\" key={index} tabIndex=\"0\" className=\"recipeContainer\" >\n                <div className=\"recipeImageTitle\">\n                  <img className=\"recipeImage\" src={recipe.image_url} alt={recipe.title} />\n                  <h2 className=\"recipeTitle\">{recipe.title}</h2>\n                </div>\n                <div className=\"recipeContent\">\n                  <p className=\"recipePublisher\"><span className=\"publisher\">Publisher:</span>{recipe.publisher}</p>\n\n                  <button onClick={() => onRecipeClick(recipe.recipe_id)} className=\"ingredientsButton\">View Ingredients</button>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n\n};\n\nexport default Recipes;","import React from 'react';\n\nconst GetIngredients = (props, index) => {\n  console.log(\"found ingredients\", props.ingredients)\n  return (\n    <div key={index} className=\"modal\">\n      <div className=\"modalImageContainer\">\n        <div className=\"modalImageSize\">\n          <img className=\"modalImage\" src={props.ingredientsObject.image_url} alt={props.ingredientsObject.title} />\n        </div>\n      </div>\n      <div className=\"modalContents\">\n        <h1 className=\"modalTitle\">{props.ingredientsObject.title}</h1>\n        <div className=\"modalIngredients\">\n          {props.ingredientsObject.ingredients ? props.ingredientsObject.ingredients.map((ingredient, index) => {\n            return (\n              <div>\n\n                <li key={index}>{ingredient}</li>\n              </div>\n            )\n\n          }) : null}\n        </div>\n        <button className=\"recipeButton\">\n          <a target=\"_blank\" href={props.ingredientsObject.source_url}><i class=\"fas fa-external-link-alt\"></i>  Get Recipe! </a>\n        </button>\n\n        <button onClick={() => props.closeModal(false)} className=\"closeButton\"><i class=\"fas fa-window-close\"></i>  Close </button>\n      </div>\n    </div>\n  )\n\n\n};\n\nexport default GetIngredients;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport '../Partials/App.scss';\nimport Form from './Form';\nimport Recipes from './Recipes';\nimport GetIngredients from './GetIngredients';\n\n\nconst apiKey = '452f1d12915191d1fc2777ca19f2d244';\nconst apiUrl = 'https://www.food2fork.com/api/search';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipes: [],\n      currentIngredients: [],\n      hasRecipes: true,\n      isModalShown: false,\n      isLoading: true,\n    }\n  }\n\n  setCurrentIngredients = (ingredients) => {\n    this.setState({ currentIngredients: ingredients })\n  }\n\n  getRecipes = e => {\n    e.preventDefault();\n    console.log(\"submitted\");\n    const recipeName = e.target.elements.recipeName.value;\n\n    axios({\n      method: 'GET',\n      url: apiUrl,\n      dataResponse: 'json',\n      params: {\n        key: apiKey,\n        q: recipeName,\n        format: 'json',\n      }\n    })\n      .then(res => {\n\n        if (res.data.recipes.length === 0) {\n          swal({\n            title: `Sorry..., That word cannot be found, please try another!`,\n            icon: \"error\"\n          })\n        }\n        else {\n          console.log(\"testing\", res.data.recipes);\n          const threeRecipes = res.data.recipes.slice(0, 6);\n          console.log(threeRecipes);\n          this.setState({\n            recipes: threeRecipes,\n            hasRecipes: false,\n            isLoading: false,\n          })\n        }\n      }).catch(err => (err))\n  }\n\n  getModal = (state) => {\n    // console.log(\"getModal\", state);\n    this.setState({ isModalShown: state })\n  }\n\n  closeModal = (close) => {\n    console.log(\"closeModal\", close);\n    this.setState({ isModalShown: close })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"headerContainer\">\n          <div className=\"overlay\">\n            <div className=\"headerContents\">\n              <h1 className=\"headerTitle\">what's cooking tonight? <span role=\"img\" aria-label=\"folk, plate and knife\">🍽</span></h1>\n              <p className=\"typeWord\">Type in a word to get a recipe!</p>\n\n              <Form getRecipes={(e) => this.getRecipes(e)} />\n\n            </div>\n          </div>\n        </header>\n        <div className=\"modalContainer\">\n          <Recipes id=\"recipe\" myRecipes={this.state.recipes} setCurrentIngredients={this.setCurrentIngredients} getModal={this.getModal} />\n\n          {this.state.isModalShown ? <GetIngredients ingredientsObject={this.state.currentIngredients} closeModal={this.closeModal} /> : null}\n        </div>\n\n        <footer className=\"recipeFooter\">\n          <p className=\"footerCopy\"> Created by Whitney Reid &copy; 2019</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}